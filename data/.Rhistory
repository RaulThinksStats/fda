patient[[6]]  = "Patient 6"
patient[[7]]  = "Patient 7"
patient[[8]]  = "Patient 8"
patient[[9]]  = "Patient 9"
patient[[10]] = "Patient 10"
patient[[11]] = "Patient 11"
patient[[12]] = "Patient 12"
patient[[13]] = "Patient 13"
fdnames = list("Time (sec)",
"Patient ID" = patient,
"Flow Metric")
time = (1:400)
vtibasis = create.bspline.basis(c(0, 400), 65)
vtifd <- data2fd(argvals=time, y=vti, basisobj=vtibasis,
fdnames=fdnames)
vtifd <- Data2fd(argvals=time, y=vti, basisobj=vtibasis,
fdnames=fdnames)
vtifd <- c()
vtifd <- Data2fd(argvals=time, y=vti, basisobj=vtibasis,
fdnames=fdnames)
?Data2fd
source('C:/Users/torresal/Desktop/Functional Data/Code/Dummy - Missing Values.R', echo=TRUE)
vtifd[[1]]
plot(vtifd, lty=1, main = "VTI Curves for 13 Patients", ylim = c(0,85))
plot(flowfd, lty=1, main = "Flow Curves for 13 Patients")
View(vti)
View(vti)
rfm2 <- rfm[[c(2,3,4)]]
rfm2 <- rfm[[c(2)]]
rfm2 <- rfm[[2]]
rfm2 <- rfm[[2:4]]
vti <- c()
for(i in 2:4){
vti <- cbind(vti, vti.l[[i]])
}
View(vti)
View(vti)
for(i in 1:13){
vti <- cbind(vti, vti.l[[i]])
}
vti <- data.matrix(vti)
for (i in 1:13){
vti[,i][vte[,i]>100 | vti[,i]>100] <- NA
}
vti2 <- vti[2:4,]
vtifd <- Data2fd(argvals=time, y=vti2, basisobj=vtibasis)
View(vti)
vti <- c()
for(i in 1:13){
vti <- cbind(vti, vti.l[[i]])
}
vti <- data.matrix(vti)
for (i in 1:13){
vti[,i][vte[,i]>100 | vti[,i]>100] <- NA
}
View(vti)
vti2 <- vti[,2:4]
vtifd <- Data2fd(argvals=time, y=vti2, basisobj=vtibasis)
vtifd[[1]]
function fdobj = data2fd(y, argvals, basisobj, fdnames)
if nargin < 4
fdnames{1} = 'arguments';
fdnames{2} = 'replications';
fdnames{3} = 'functions';
end
%  check the BASIS argument
if nargin < 3
error('Argument BASIS must be supplied in this release.');
end
if ~isa_basis(basisobj)
error('Argument BASISOBJ is not a basis obj.');
end
%  check the dimensions of Y
yd   = size(y);
if yd(1) == 1
if length(yd) == 2
y  = y';
yd = size(y);
else
error(['Y is an array and length of ', ...
'first dimension = 1.']);
end
end
ydim = length(yd);
if ydim > 3
error('Too many dimensions for argument Y.');
end
%  set number of sampled values
n    = yd(1);
if n == 1
error('Only one value in ARGVALS not allowed.');
end
%  set number of replications
if (ydim > 1)
nrep = yd(2);
else
nrep = 1;
end
%  set number of variables
if (ydim > 2)
nvar = yd(3);
else
nvar = 1;
end
%  check argument value array
argd  = size(argvals);
if length(argd) > 2
error('Argument ARGVALS has too many dimensions.');
end
if argd(1) == 1, argvals = argvals'; argd = size(argvals); end
nargd = length(argd);
if argd(nargd) == 1, nargd = nargd - 1; end
if (argd(1) ~= n)
error('Number of arg. values not equal to 1st dim. of Y.');
end
if nargd == 2 && argd(2) ~= 1 && argd(2) ~= nrep
error(['Matrix ARGVALS must have same number of columns', ...
'as the number of replicates.']);
end
%  Issue a warning if arguments are outside of the range in the basis.
rangeval = getbasisrange(basisobj);
if nargd == 1
temp = argvals;
else
temp = reshape(argvals, n*nrep, 1);
end
temp = temp(~isnan(argvals));
if min(temp) < rangeval(1) || max(temp) > rangeval(2)
warning('Wid1:range', ...
'Some arguments values are outside of the range in BASIS.');
if nargd == 1
index = argvals < rangeval(1) || argvals > rangeval(2);
argvals(index) = NaN;
else
for irep=1:nrep
index = argvals(:,irep) < rangeval(1) || ...
argvals(:,irep) > rangeval(2);
argvals(index,irep) = NaN;
end
end
end
%  Determine which of three cases applies:
%  First case:  ARGVALS a vector, and there are no missing values in Y.
%  Second case: ARGVALS a vector, but missing values in ARGVALS and/or Y.
%  Third case:  ARGVALS is a matrix
if nargd == 1 || (nargd == 2 && argd(2) == 1)
if ~any(isnan(argvals)) && ~any(isnan(y(:)))
%  ------------------------------------------------
%  First case:  no missing values, ARGVALS a vector
%  ------------------------------------------------
nbasis = getnbasis(basisobj);
if nbasis <= n
coef = project_basis(y, argvals, basisobj);
else
coef = project_basis(y, argvals, basisobj, 1);
end
else
%  ---------------------------------------------------------
%  Second case:  ARGVALS a vector, but missing data present.
%  ---------------------------------------------------------
nbasis   = getnbasis(basisobj);
coefd    = yd;
coefd(1) = nbasis;
coef     = zeros(coefd);
% set up penalty and basis matrix
index    = ~isnan(argvals);
basismat = getbasismatrix(argvals, basisobj);
penmat   = eval_penalty(basisobj);
penmat   = penmat + 1e-10 .* max(max(penmat)) .* eye(nbasis);
lambda1  = 0.0001 .* sum(sum(basismat(index,:).^2))./sum(sum(diag(penmat)));
penmat1  = lambda1 .* penmat;
%  process each observation in turn
if(length(coefd) == 2)
for j=1:nrep
yy    = y(:,j);
index = ~isnan(yy) && ~isnan(argvals);
if length(yy(index)) < 2
error(['Less than 2 data values available for curve ',...
num2str(j),'.']);
end
temp  = basismat(index,:);
Cmat  = temp' * temp + penmat1;
Dmat  = temp' * yy(index);
coef(:,j) = symsolve(Cmat, Dmat);
end
else
for j=1:nrep
for k=1:nvar
yy = y(:,j,k);
index = ~isnan(yy) && ~isnan(argvals);
if length(yy(index)) < 2
error(['Less than 2 data values available for curve ',...
num2str(j),' and variable ',num2str(k),'.']);
end
temp  = basismat(index,:);
Cmat = temp' * temp + penmat1;
Dmat = temp' * yy(index);
coef(:,j,k) = symsolve(Cmat,Dmat);
end
end
end
end
else
%  ------------------------------------------------
%  Third case:  ARGVALS a matrix.
%  ------------------------------------------------
nbasis   = getnbasis(basisobj);
coefd    = yd;
coefd(1) = nbasis;
coef     = zeros(coefd);
argv     = reshape(argvals,n*nrep,1);
index    = ~isnan(argv);
argv     = unique(argv(index));
basismat = getbasismatrix(argv, basisobj);
penmat   = eval_penalty(basisobj);
penmat   = penmat + 1e-10 .* max(max(penmat)) .* eye(nbasis);
lambda1  = 0.0001 .* sum(sum(basismat.^2))./sum(sum(diag(penmat)));
penmat1  = lambda1 .* penmat;
if length(coefd) == 2
for j=1:nrep
yy    = y(:,j);
argv  = argvals(:,j);
index = (~isnan(yy) & ~isnan(argv));
if length(yy(index)) < 2
error(['Less than 2 data values available for curve ',...
num2str(j),'.']);
end
coef(:,j) =  ...
project_basis(yy(index), argv(index), basisobj, penmat1);
end
else
for j=1:nrep
for k=1:nvar
yy    = y(:,j,k);
argv  = argvals(:,j);
index = (~isnan(yy) & ~isnan(argv));
if length(yy(index)) < 2
error(['Less than 2 data values available for curve ',...
num2str(j),' and variable ',num2str(k),'.']);
end
coef(:,j,k) = ...
project_basis(yy(index), argv(index), basisobj, penmat1);
end
end
end
end
% set up the functional data object
fdobj = fd(coef, basisobj, fdnames);
?fda.u
?`fda.usc-package`
data("phoneme")
phoneme
mlearn<-phoneme$learn[c(1:50,101:150,201:250),]
ut.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd2=kmeans.fd(mlearn,ncl=3,draw=TRUE,par.ini=list(method="exact"))
ut.fd1=kmeans.fd(mlearn,ncl=2,draw=TRUE)
out.fd2=kmeans.fd(mlearn,ncl=2,draw=TRUE,par.ini=list(method="exact"))
?`fda.usc-package`
ut.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd2=kmeans.fd(mlearn,ncl=3,draw=TRUE,par.ini=list(method="exact"))
ind=c(17,77,126)
out.fd3=kmeans.fd(mlearn,ncl=mlearn[ind,],draw=FALSE,
dfunc=func.trim.FM,par.dfunc=list(trim=0.1))
out.fd4=kmeans.fd(mlearn,ncl=mlearn[ind,],draw=FALSE,
dfunc=func.med.FM)
out.fd5=kmeans.fd(mlearn,ncl=3,dfunc=func.trim.RPD,
max.iter=10,par.dfunc=list(dfunc="depth.FM",deriv=c(0,1,1)))
group=c(rep(1,50),rep(2,50),rep(3,50))
table(out.fd5$cluster,group)
for(i in 1:13){
flow <- cbind(flow, flow.l[[i]])
}
for(i in 1:13){
vte <- cbind(vte, vte.l[[i]])
}
for(i in 1:13){
vti <- cbind(vti, vti.l[[i]])
}
flow <- data.matrix(flow)
vte <- data.matrix(vte)
vti <- data.matrix(vti)
?`fda.usc-package`
flowfd = smooth.basis(time, flow, flowbasis)$fd
flowfd$fdnames = list("Time (recorded every 0.5 seconds)",
"Patient ID",
"Flow Metric")
vtefd = smooth.basis(time, vte, vtebasis)$fd
vtefd$fdnames = list("Time (recorded every 0.5 seconds)",
"Patient ID",
"VTE Metric")
vtifd = smooth.basis(time, vti, vtibasis)$fd
vtifd$fdnames = list("Time (recorded every 0.5 seconds)",
"Patient ID",
"VTI Metric")
ut.fd1=kmeans.fd(flowfd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
rfm = lapply(temp, read.csv)
rfm = lapply(temp, read.csv)
getwd()
temp = sort(list.files(pattern="*.csv"))
rfm = lapply(temp, read.csv)
rfm <- lapply(rfm, function(x) x[,-c(33:34)])
rfm <- lapply(rfm, function(x) x[(which(x$Leak != -1)[1]):length(x$Leak),])
flow.l <- lapply(rfm, function(x) x[1:400,4])
vte.l <- lapply(rfm, function(x) x[1:400,5])
vti.l <- lapply(rfm, function(x) x[1:400,6])
flow <-  c()
vte <- c()
vti <- c()
for(i in 1:13){
flow <- cbind(flow, flow.l[[i]])
}
for(i in 1:13){
vte <- cbind(vte, vte.l[[i]])
}
for(i in 1:13){
vti <- cbind(vti, vti.l[[i]])
}
flow <- data.matrix(flow)
vte <- data.matrix(vte)
vti <- data.matrix(vti)
for (i in 1:12){
plot(flow[,i], type = "l", xlab = "Time (every .5s sec)",
ylab = "Flow Metric", main = i)
}
par(mfrow = c(4,3))
for (i in 1:12){
plot(flow[,i], type = "l", xlab = "Time (every .5s sec)",
ylab = "Flow Metric", main = i)
}
for (i in 1:12){
plot(vte[,i], type = "l", xlab = "Time (every .5s sec)",
ylab = "VTE Metric", main = i)
}
for (i in 1:12){
plot(vti[,i], type = "l", xlab = "Time (every .5s sec)",
ylab = "VTI Metric", main = i)
}
flowfd = smooth.basis(time, flow, flowbasis)$fd
flowfd$fdnames = list("Time (recorded every 0.5 seconds)",
"Patient ID",
"Flow Metric")
vtefd = smooth.basis(time, vte, vtebasis)$fd
vtefd$fdnames = list("Time (recorded every 0.5 seconds)",
"Patient ID",
"VTE Metric")
vtifd = smooth.basis(time, vti, vtibasis)$fd
vtifd$fdnames = list("Time (recorded every 0.5 seconds)",
"Patient ID",
"VTI Metric")
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
par(mfrow = c(2,2))
par(mfrow = c(3,1))
plot(vtefd, lty=1, main = "VTE Curves for 13 Patients", ylim = c(0,22.5))
lines(mean(vtefd), lty = 1, lwd = 4, col = "black")
lines(mean(vtefd)+2*std.fd(vtefd), lty = 2, lwd = 2, col = "black")
lines(mean(vtefd)-2*std.fd(vtefd), lty = 2, lwd = 2, col = "black")
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd2=kmeans.fd(mlearn,ncl=3,draw=TRUE,par.ini=list(method="exact"))
out.fd2=kmeans.fd(vtefd,ncl=3,draw=TRUE,par.ini=list(method="exact"))
ut.fd1=kmeans.fd(vtefd,ncl=2,draw=TRUE)
out.fd2=kmeans.fd(vtefd,ncl=2,draw=TRUE,par.ini=list(method="exact"))
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd2=kmeans.fd(vtefd,ncl=3,draw=TRUE,par.ini=list(method="exact"))
ut.fd1=kmeans.fd(vtefd,ncl=4,draw=TRUE)
out.fd2=kmeans.fd(vtefd,ncl=4,draw=TRUE,par.ini=list(method="exact"))
out.fd2=kmeans.fd(vtefd,ncl=4,draw=TRUE,par.ini=list(method="exact"))
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd2=kmeans.fd(vtefd,ncl=3,draw=TRUE,par.ini=list(method="exact"))
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
ut.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd2=kmeans.fd(vtefd,ncl=3,draw=TRUE,par.ini=list(method="exact"))
?`fda.usc-package`
data(phoneme)
mlearn<-phoneme[["learn"]]
glearn<-phoneme[["classlearn"]]
h=9:19
out=classif.np(glearn,mlearn,h=h)
summary.classif(out)
data(phoneme)
mlearn<-phoneme[["learn"]]
glearn<-phoneme[["classlearn"]]
mtest<-phoneme[["test"]]
gtest<-phoneme[["classtest"]]
dataf<-data.frame(glearn)
dat=list("df"=dataf,"x"=mlearn)
a1<-classif.glm(glearn~x, data = dat)
newdat<-list("x"=mtest)
gtest<-phoneme[["classtest"]]
dataf<-data.frame(glearn)
dat=list("df"=dataf,"x"=mlearn)
a1<-classif.glm(glearn~x, data = dat)
newdat<-list("x"=mtest)
p1<-predict.classif(a1,newdat)
table(gtest,p1)
sum(p1==gtest)/250
data(phoneme)
mlearn<-phoneme[["learn"]]
mtest<-phoneme[["test"]]
glearn<-phoneme[["classlearn"]]
gtest<-phoneme[["classtest"]]
a1<-classif.depth(glearn,mlearn,depth="RP")
table(a1$group.est,glearn)
a2<-classif.depth(glearn,mlearn,depth="RP",CV=TRUE)
a3<-classif.depth(glearn,mlearn,depth="RP",CV=FALSE)
a4<-classif.depth(glearn,mlearn,mtest,"RP")
a5<-classif.depth(glearn,mlearn,mtest,"RP",CV=TRUE)
data(phoneme)
mlearn<-phoneme[["learn"]]
glearn<-phoneme[["classlearn"]]
h=9:19
out=classif.np(glearn,mlearn,h=h)
summary.classif(out)
data(phoneme)
mlearn<-phoneme[["learn"]]
glearn<-phoneme[["classlearn"]]
h=9:19
out=classif.np(glearn,mlearn,h=h)
summary.classif(out)
data(phoneme)
mlearn<-phoneme$learn[c(1:50,101:150,201:250),]
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd2=kmeans.fd(mlearn,ncl=3,draw=TRUE,par.ini=list(method="exact"))
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vte,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtifd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtifd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtifd,ncl=2,draw=TRUE)
out.fd1=kmeans.fd(vtifd,ncl=2,draw=TRUE)
out.fd1=kmeans.fd(vtifd,ncl=2,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=2,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=2,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=2,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(vtefd,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd1=kmeans.fd(mlearn,ncl=3,draw=TRUE)
out.fd2=kmeans.fd(mlearn,ncl=3,draw=TRUE,par.ini=list(method="exact"))
ind=c(17,77,126)
out.fd3=kmeans.fd(mlearn,ncl=mlearn[ind,],draw=FALSE,
dfunc=func.trim.FM,par.dfunc=list(trim=0.1))
out.fd4=kmeans.fd(mlearn,ncl=mlearn[ind,],draw=FALSE,
dfunc=func.med.FM)
out.fd5=kmeans.fd(mlearn,ncl=3,dfunc=func.trim.RPD,
max.iter=10,par.dfunc=list(dfunc="depth.FM",deriv=c(0,1,1)))
group=c(rep(1,50),rep(2,50),rep(3,50))
table(out.fd5$cluster,group)
data(phoneme)
mlearn<-phoneme[["learn"]]
glearn<-phoneme[["classlearn"]]
mtest<-phoneme[["test"]]
gtest<-phoneme[["classtest"]]
dataf<-data.frame(glearn)
dat=list("df"=dataf,"x"=mlearn)
a1<-classif.glm(glearn~x, data = dat)
newdat<-list("x"=mtest)
p1<-predict.classif(a1,newdat)
table(gtest,p1)
sum(p1==gtest)/250
?`fda.usc-package`
?`fda.usc-package`
data(tecator)
ab=tecator$absorp.fdata
ab1=fdata.deriv(ab,nderiv=1)
ab2=fdata.deriv(ab,nderiv=2)
gfat=factor(as.numeric(tecator$y$Fat>=15))
out01=classif.DD(gfat,ab,depth="mode",classif="np")
out02=classif.DD(gfat,ab2,depth="mode",classif="np")
ctrl<-list(draw=T,col=gray(c(0,.5)),alpha=.2)
out02bis=classif.DD(gfat,ab2,depth="mode",classif="np",control=ctrl)
out03=classif.DD(gfat,list(ab2,ab2),depth=c("RP","mode"),classif="np")
ldata<-list("ab"=ab2,"ab2"=ab2)
out04=classif.DD(gfat,ldata,depth="mode",classif="np",w=c(0.5,0.5))
out05=classif.DD(gfat,ldata,depth="mode",classif="np")
out06=classif.DD(gfat,ldata,depth="modep",classif="np")
data(iris)
group<-iris[,5]
x<-iris[,1:4]
out10=classif.DD(group,x,depth="RP",classif="lda")
summary.classif(out10)
out11=classif.DD(group,list(x,x),depth=c("MhD","RP"),classif="lda")
summary.classif(out11)
data(phoneme)
mlearn<-phoneme[["learn"]]
glearn<-as.numeric(phoneme[["classlearn"]])-1
out20=classif.DD(glearn,mlearn,depth="FM",classif="glm")
out21=classif.DD(glearn,list(mlearn,mlearn),depth=c("FM","RP"),classif="glm")
summary.classif(out20)
summary.classif(out21)
